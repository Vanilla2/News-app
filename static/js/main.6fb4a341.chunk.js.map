{"version":3,"sources":["api.js","Article.js","ArticleBox.js","navbar.js","App.js","serviceWorker.js","index.js"],"names":["a","console","log","time","Date","toLocaleDateString","URL","fetch","res","json","data","error","tag","encodeURI","api","getHotArticles","getArticlesByTag","Article","props","onClick","document","location","url","className","title","author","description","src","urlToImage","alt","ArticleBox","useState","articles","setArticles","loading","setLoading","useEffect","view","then","id","color","length","map","x","key","Navbar","value","setValue","handleKey","event","keyCode","passValue","trim","handleChange","addEventListener","removeEventListener","type","placeholder","onChange","target","App","setView","newval","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6fb4a341.chunk.js","sourcesContent":["// function getHotArticles(){\r\n//     let time = new Date();\r\n//     time = time.toLocaleDateString();\r\n//     let URL = `http://newsapi.org/v2/top-headlines?`+ \r\n//                `q=Coronavirus&` +\r\n//                `sortBy=popularity&` +\r\n//                `from=${time}&` +\r\n//                `apiKey=6ba59ddb5a9a40a6bdc5558858263b49`;\r\n//     let xhr = new XMLHttpRequest;\r\n//     xhr.onload = function() {\r\n//         if (this.readyState === XMLHttpRequest.DONE ) { \r\n//             let response = JSON.parse(this.responseText);\r\n//             console.log(response);\r\n//         }\r\n//     }\r\n//     xhr.open(\"GET\", URL);\r\n//     xhr.send();\r\n// }\r\nasync function getHotArticles(){\r\n    console.log(\"Request made: 1\");\r\n    let time = new Date();\r\n    time = time.toLocaleDateString();\r\n    let URL = `https://cors-anywhere.herokuapp.com/https://newsapi.org/v2/top-headlines?`+ \r\n               `country=US&` +\r\n               `sortBy=popularity&` +\r\n               `from=${time}&` +\r\n               `apiKey=6ba59ddb5a9a40a6bdc5558858263b49`;\r\n    try{\r\n        let res = await fetch(URL);\r\n        const data = await res.json();\r\n        console.log(data);\r\n        return(data);\r\n        // solvePromise(data);\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n    // xhr.open(\"GET\", URL);\r\n    // xhr.send();\r\n}\r\nasync function getArticlesByTag(tag){\r\n    tag = encodeURI(tag);\r\n    console.log(\"Request made: 2\");\r\n    let URL = `https://cors-anywhere.herokuapp.com/https://newsapi.org/v2/everything?`+ \r\n               `sortBy=popularity&` +\r\n               `q=${tag}&` +\r\n               `apiKey=6ba59ddb5a9a40a6bdc5558858263b49`;\r\n    try{\r\n        let res = await fetch(URL);\r\n        const data = await res.json();\r\n        console.log(data);\r\n        return(data);\r\n    } catch(err){\r\n        console.error(err);\r\n    }\r\n}\r\nlet api = {\r\n    getHotArticles: getHotArticles,\r\n    getArticlesByTag: getArticlesByTag\r\n}\r\nexport default api;","import React from 'react'\r\n\r\nfunction Article(props){\r\n    function goToSource(){\r\n        document.location = props.data.url;\r\n    }\r\n    return(\r\n        <div onClick = {goToSource} className = \"article\">\r\n            <p className = \"article-title\">{props.data.title}</p>\r\n            {/* <p className = \"article-source\">{props.data.source.name}</p> */}\r\n            <p className = \"article-author\">{props.data.author}</p>\r\n            <p className = \"article-description\">{props.data.description}</p>\r\n            {/* <a href = {props.data.url} className = \"article-url\">{props.data.url}</a> */}\r\n            <img className = \"article-image\" src = {props.data.urlToImage} alt = \"Not Found\"/>\r\n        </div>\r\n    )\r\n}\r\nexport default Article;","import React, { useState, useEffect } from 'react';\r\nimport {Roller} from 'react-spinners-css';\r\nimport api from './api'\r\nimport Article from './Article'\r\n\r\nfunction ArticleBox(props){\r\n    const [articles, setArticles] = useState([]);\r\n    const [loading, setLoading] = useState(1);\r\n    useEffect(() =>{\r\n        if (props.view !== \"Top News\"){\r\n            setLoading(1);\r\n            api.getArticlesByTag(props.view).then(res =>{\r\n                setArticles(res.articles);\r\n                setLoading(0);\r\n            })\r\n        }\r\n    },[props.view]);\r\n    useEffect(() =>{\r\n        setLoading(1);\r\n        api.getHotArticles().then(res =>{\r\n            setArticles(res.articles);\r\n            setLoading(0);\r\n        })\r\n    }, []);\r\n    console.log(loading);\r\n    if (loading){\r\n        return(\r\n            <div id = \"loading-box\">\r\n                <Roller color = \"black\"/>\r\n            </div>\r\n        )\r\n    }\r\n    if(articles.length === 0){\r\n        return(\r\n            <div id = \"empty-box\">\r\n                <h3 id = \"empty-text\">\r\n                    No articles found\r\n                </h3>\r\n            </div>\r\n        );\r\n    }\r\n    return(\r\n        <div id = \"article-box\">\r\n            {articles.map(x =>(\r\n                <Article key = {x.url} data = {x} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default ArticleBox","import React, { useState, useEffect } from 'react';\r\n/* eslint-disable */\r\nfunction Navbar(props){\r\n    const [value, setValue] = useState(\"\");\r\n    function handleChange(event){\r\n        setValue(event.target.value);\r\n    }\r\n    function handleKey(event){\r\n        if (event.keyCode == 13){\r\n            let passValue = value.trim();\r\n            setValue(\"\");\r\n            if (passValue !== \"\"){\r\n                props.handleChange(passValue);\r\n            }\r\n        }\r\n    }\r\n    useEffect(() =>{\r\n        document.addEventListener(\"keyup\", handleKey);\r\n        return(() =>{\r\n            document.removeEventListener(\"keyup\", handleKey);\r\n        });\r\n    });\r\n    return(\r\n        <div className = \"view-box\">\r\n            <p className = 'view-text'>\r\n                You are viewing: <b>{props.view}</b>\r\n            </p>\r\n            <div className = \"search-box\">\r\n                <p className = \"search-text\">\r\n                    Search for news:\r\n                </p>\r\n                <input type = \"text\" placeholder = \"Ex: Bitcoin\" onChange = {handleChange} className = \"search-input\" value = {value} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Navbar;","import React, { useState, useEffect } from 'react';\r\nimport ArticleBox from './ArticleBox';\r\nimport Navbar from './navbar'\r\nimport './App.css';\r\nimport \"./style.css\";\r\nfunction App() {\r\n    const [view,setView] = useState(\"Top News\")\r\n    function handleChange(newval){\r\n        setView(newval);\r\n    }\r\n    return(\r\n        <div id = \"body\">\r\n            <Navbar view = {view} handleChange = {handleChange}/>\r\n            <ArticleBox view = {view}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}